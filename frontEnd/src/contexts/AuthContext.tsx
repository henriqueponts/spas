// src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import type { ReactNode } from 'react';
import api from '../services/api';
import type { User } from '../types';

interface AuthContextData {
  user: User | null;
  loading: boolean;
  login: (userData: User, token: string) => void;
  logout: () => void;
}

// O contexto continua o mesmo
const AuthContext = createContext<AuthContextData>({} as AuthContextData);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true); // Come√ßa como true para validar a sess√£o

  // Fun√ß√£o de logout centralizada e otimizada com useCallback
  const logout = useCallback(() => {
    setUser(null);
    localStorage.removeItem('token');
    localStorage.removeItem('usuario'); // Limpa tamb√©m o usu√°rio antigo, por seguran√ßa
    delete api.defaults.headers.common['Authorization'];
    
    // Redireciona para o login se n√£o estiver l√°
    if (window.location.pathname !== '/login') {
      window.location.href = '/login';
    }
  }, []);

  // Efeito para validar a sess√£o na inicializa√ß√£o do app
  useEffect(() => {
    const validateSession = async () => {
      const token = localStorage.getItem('token');

      // Se n√£o h√° token, n√£o h√° sess√£o para validar.
      if (!token) {
        setLoading(false);
        return;
      }

      try {
        // Define o header para a chamada de valida√ß√£o
        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        
        // Tenta buscar os dados do usu√°rio. Se o token for inv√°lido/expirado,
        // a API retornar√° 401, o interceptor do Axios ser√° acionado e cair√° no catch.
        console.log('üîÑ Validando sess√£o existente...');
        const response = await api.get<User>('/auth/home');
        
        // Se a valida√ß√£o for bem-sucedida, atualiza o estado com dados frescos da API
        setUser(response.data);
        console.log('‚úÖ Sess√£o validada com sucesso!');

      } catch {
        // Se a valida√ß√£o falhar (ex: token expirado), o interceptor do Axios j√°
        // deve ter iniciado o processo de logout. Aqui garantimos que o estado local seja limpo.
        console.warn('‚ùå Sess√£o inv√°lida ou expirada. Fazendo logout.');
        logout();
      } finally {
        // Garante que o loading seja finalizado, permitindo a renderiza√ß√£o do app
        setLoading(false);
      }
    };

    validateSession();
  }, [logout]); // A depend√™ncia `logout` √© segura por causa do `useCallback`

  // Fun√ß√£o de login atualizada
  const login = (userData: User, token: string) => {
    localStorage.setItem('token', token);
    // N√£o √© mais estritamente necess√°rio salvar o usu√°rio no localStorage,
    // pois a valida√ß√£o na inicializa√ß√£o √© a fonte da verdade.
    // Manter pode ser √∫til para uma exibi√ß√£o inicial r√°pida, mas vamos remover para garantir consist√™ncia.
    // localStorage.setItem('usuario', JSON.stringify(userData)); 
    
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    setUser(userData);
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Hook para usar o contexto (sem altera√ß√µes)
// eslint-disable-next-line react-refresh/only-export-components
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth deve ser usado dentro de um AuthProvider');
  }
  return context;
};