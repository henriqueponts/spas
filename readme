cd .\frontEnd\ ---- npm run dev

cd .\server\ ---- npm start


-- ============================================
-- SISTEMA SPAS - BANCO DE DADOS CORRIGIDO
-- ============================================

CREATE DATABASE spas_db;
USE spas_db;

-- ============================================
-- TABELAS DE CONFIGURAÇÃO E USUÁRIOS
-- ============================================

-- Tabela de equipamentos (CRAS, CREAS, etc.)
CREATE TABLE equipamento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL UNIQUE,
    regiao VARCHAR(100),
    endereco VARCHAR(255),
    telefone VARCHAR(20),
    email VARCHAR(100),
    ativo BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_equipamento_ativo (ativo),
    INDEX idx_equipamento_regiao (regiao)
);

-- Tabela de cargos
CREATE TABLE cargos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50) NOT NULL UNIQUE,
    descricao TEXT NULL,
    nivel_acesso TINYINT NOT NULL DEFAULT 1 COMMENT '1=Básico, 2=Intermediário, 3=Avançado, 4=Admin',
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de usuários do sistema
CREATE TABLE usuarios (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    cpf VARCHAR(14) NOT NULL UNIQUE,
    email VARCHAR(100) UNIQUE,
    senha_hash VARCHAR(255) NOT NULL,
    cargo_id INT NOT NULL,
    equipamento_id INT NOT NULL,
    ativo BOOLEAN DEFAULT TRUE,
    ultimo_login TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (cargo_id) REFERENCES cargos(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    FOREIGN KEY (equipamento_id) REFERENCES equipamento(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    INDEX idx_usuarios_cpf (cpf),
    INDEX idx_usuarios_ativo (ativo),
    INDEX idx_usuarios_equipamento (equipamento_id)
);

-- ============================================
-- TABELAS DE PROGRAMAS E REFERÊNCIAS
-- ============================================

-- Tabela de programas sociais disponíveis
CREATE TABLE programas_sociais_disponiveis (
    id INT AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(10) NOT NULL UNIQUE,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    valor_padrao DECIMAL(10,2) DEFAULT NULL,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_programas_codigo (codigo),
    INDEX idx_programas_ativo (ativo)
);

-- Tabela de tipos de despesas
CREATE TABLE tipos_despesas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(20) NOT NULL UNIQUE,
    nome VARCHAR(50) NOT NULL,
    descricao TEXT,
    obrigatoria BOOLEAN DEFAULT FALSE,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================
-- TABELAS PRINCIPAIS - FAMÍLIAS E PESSOAS
-- ============================================

-- Tabela principal para famílias
CREATE TABLE familias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    equipamento_id INT NOT NULL,
    data_cadastro DATE NOT NULL,
    data_atendimento DATE NOT NULL COMMENT 'Data do atendimento que gerou o cadastro',
    prontuario VARCHAR(50) UNIQUE,
    profissional_id INT NOT NULL,
    situacao ENUM('ativo', 'inativo', 'transferido', 'suspenso') NOT NULL DEFAULT 'ativo',
    observacoes_gerais TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (equipamento_id) REFERENCES equipamento(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    FOREIGN KEY (profissional_id) REFERENCES usuarios(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    INDEX idx_familias_data_cadastro (data_cadastro),
    INDEX idx_familias_prontuario (prontuario),
    INDEX idx_familias_equipamento (equipamento_id),
    INDEX idx_familias_profissional (profissional_id),
    INDEX idx_familias_situacao (situacao)
);

-- Tabela para pessoas (responsável familiar e membros)
CREATE TABLE pessoas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    nome_completo VARCHAR(255) NOT NULL,
    data_nascimento DATE NOT NULL,
    sexo ENUM('feminino', 'masculino', 'outro') NOT NULL,
    cpf VARCHAR(14) UNIQUE,
    rg VARCHAR(20),
    orgao_expedidor VARCHAR(20),
    estado_civil ENUM('solteiro', 'casado', 'divorciado', 'viuvo', 'uniao_estavel', 'separado'),
    escolaridade ENUM('nao_alfabetizado', 'fundamental_incompleto', 'fundamental_completo', 
                     'medio_incompleto', 'medio_completo', 'superior_incompleto', 
                     'superior_completo', 'pos_graduacao'),
    naturalidade VARCHAR(100),
    telefone VARCHAR(20),
    telefone_recado VARCHAR(20),
    email VARCHAR(100),
    nis VARCHAR(20),
    titulo_eleitor VARCHAR(20),
    ctps VARCHAR(20),
    tipo_membro ENUM('responsavel', 'conjuge', 'filho', 'pai', 'mae', 'irmao', 'avo', 
                    'neto', 'sobrinho', 'tio', 'primo', 'outro') NOT NULL,
    ocupacao VARCHAR(100),
    renda_mensal DECIMAL(10,2) DEFAULT 0.00,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
        
    INDEX idx_pessoas_familia (familia_id),
    INDEX idx_pessoas_cpf (cpf),
    INDEX idx_pessoas_tipo_membro (tipo_membro),
    INDEX idx_pessoas_ativo (ativo)
);

-- ============================================
-- TABELAS DE INFORMAÇÕES FAMILIARES
-- ============================================

-- Tabela para endereços
CREATE TABLE enderecos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL UNIQUE,
    logradouro VARCHAR(255) NOT NULL,
    numero VARCHAR(20),
    complemento VARCHAR(100),
    bairro VARCHAR(100) NOT NULL,
    cidade VARCHAR(100) NOT NULL,
    uf CHAR(2) NOT NULL,
    cep VARCHAR(10),
    referencia VARCHAR(255),
    tempo_moradia VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
        
    INDEX idx_enderecos_bairro (bairro),
    INDEX idx_enderecos_cidade (cidade),
    INDEX idx_enderecos_cep (cep)
);

-- Tabela para condições de saúde
CREATE TABLE saude (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL UNIQUE,
    tem_deficiencia BOOLEAN DEFAULT FALSE,
    deficiencia_qual TEXT,
    tem_tratamento_saude BOOLEAN DEFAULT FALSE,
    tratamento_qual TEXT,
    usa_medicacao_continua BOOLEAN DEFAULT FALSE,
    medicacao_qual TEXT,
    tem_dependente_cuidados BOOLEAN DEFAULT FALSE,
    dependente_quem VARCHAR(255),
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
        
    INDEX idx_saude_deficiencia (tem_deficiencia),
    INDEX idx_saude_tratamento (tem_tratamento_saude)
);

-- Tabela para condições habitacionais (CORRIGIDA)
CREATE TABLE habitacao (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL UNIQUE,
    qtd_comodos INT,
    qtd_dormitorios INT,
    -- Alterado para SET para permitir múltiplas seleções
    tipo_construcao SET('alvenaria', 'madeira', 'mista', 'outro'),
    area_conflito BOOLEAN DEFAULT FALSE,
    -- Alterado para SET para permitir múltiplas seleções
    condicao_domicilio SET('propria_quitada', 'propria_financiada', 'alugada', 'cedida', 'ocupada', 'situacao_rua'),
    energia_eletrica ENUM('propria', 'compartilhada', 'sem_medidor', 'nao_tem') DEFAULT 'propria',
    agua ENUM('propria', 'compartilhada', 'sem_medidor', 'nao_tem') DEFAULT 'propria',
    esgoto ENUM('rede', 'fossa', 'ceu_aberto', 'nao_tem') DEFAULT 'rede',
    coleta_lixo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
        
    INDEX idx_habitacao_area_conflito (area_conflito)
);

-- Tabela para trabalho e renda (MELHORADA)
CREATE TABLE trabalho_renda (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL UNIQUE,
    quem_trabalha TEXT COMMENT 'Descrição detalhada de quem trabalha',
    rendimento_total DECIMAL(10,2) DEFAULT 0.00,
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Tabela para programas sociais recebidos (MELHORADA)
CREATE TABLE familia_programas_sociais (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    programa_id INT NOT NULL,
    valor DECIMAL(10,2) DEFAULT 0.00,
    data_inicio DATE,
    data_fim DATE,
    ativo BOOLEAN DEFAULT TRUE,
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (programa_id) REFERENCES programas_sociais_disponiveis(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    UNIQUE KEY unique_familia_programa (familia_id, programa_id),
    INDEX idx_familia_programas_ativo (ativo),
    INDEX idx_familia_programas_data (data_inicio, data_fim)
);

-- Tabela para despesas mensais (MELHORADA)
CREATE TABLE familia_despesas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    tipo_despesa_id INT NOT NULL,
    valor DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    observacoes VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (tipo_despesa_id) REFERENCES tipos_despesas(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    UNIQUE KEY unique_familia_despesa (familia_id, tipo_despesa_id),
    INDEX idx_familia_despesas_valor (valor)
);

-- Tabela para situação social
CREATE TABLE situacao_social (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL UNIQUE,
    participa_religiao BOOLEAN DEFAULT FALSE,
    religiao_qual VARCHAR(255),
    participa_acao_social BOOLEAN DEFAULT FALSE,
    acao_social_qual VARCHAR(255),
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Tabela para serviços públicos acessados
CREATE TABLE familia_servicos_publicos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    tipo ENUM('saude', 'educacao', 'assistencia_social', 'cultura', 'esporte', 'lazer'),
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    UNIQUE KEY unique_familia_servico (familia_id, tipo),
    INDEX idx_familia_servicos_tipo (tipo)
);

-- ============================================
-- TABELAS DE ATENDIMENTOS E HISTÓRICO
-- ============================================

-- Tabela para evolução do prontuário
CREATE TABLE evolucoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    usuario_id INT NOT NULL,
    data_evolucao DATE NOT NULL,
    hora_evolucao TIME NOT NULL,
    tipo_atendimento ENUM('inicial', 'retorno', 'visita_domiciliar', 'grupo', 'oficina', 'outro') DEFAULT 'retorno',
    descricao TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    INDEX idx_evolucoes_data (data_evolucao),
    INDEX idx_evolucoes_familia (familia_id),
    INDEX idx_evolucoes_usuario (usuario_id),
    INDEX idx_evolucoes_tipo (tipo_atendimento)
);

-- Tabela para benefícios concedidos
CREATE TABLE beneficios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    tipo_beneficio ENUM('cesta_basica', 'auxilio_funeral', 'auxilio_natalidade', 'passagem', 'outro'),
    descricao_beneficio VARCHAR(255),
    data_concessao DATE NOT NULL,
    valor DECIMAL(10,2) DEFAULT 0.00,
    justificativa TEXT,
    responsavel_id INT NOT NULL,
    status ENUM('concedido', 'entregue', 'cancelado') DEFAULT 'concedido',
    data_entrega DATE NULL,
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (responsavel_id) REFERENCES usuarios(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    INDEX idx_beneficios_data_concessao (data_concessao),
    INDEX idx_beneficios_status (status),
    INDEX idx_beneficios_tipo (tipo_beneficio)
);

-- Tabela para encaminhamentos
CREATE TABLE encaminhamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    familia_id INT NOT NULL,
    evolucao_id INT,
    local_encaminhamento VARCHAR(255) NOT NULL,
    contato_local VARCHAR(255),
    motivo TEXT NOT NULL,
    data_encaminhamento DATE NOT NULL,
    data_prevista_retorno DATE,
    responsavel_id INT NOT NULL,
    status ENUM('pendente', 'realizado', 'cancelado') DEFAULT 'pendente',
    data_realizacao DATE,
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (familia_id) REFERENCES familias(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (evolucao_id) REFERENCES evolucoes(id)
        ON DELETE SET NULL
        ON UPDATE CASCADE,
    FOREIGN KEY (responsavel_id) REFERENCES usuarios(id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
        
    INDEX idx_encaminhamentos_data (data_encaminhamento),
    INDEX idx_encaminhamentos_status (status),
    INDEX idx_encaminhamentos_familia (familia_id)
);

-- ============================================
-- INSERÇÃO DE DADOS INICIAIS
-- ============================================

-- Inserir cargos
INSERT INTO cargos (nome, descricao, nivel_acesso) VALUES
('EXTERNO', 'Usuário externo com acesso limitado', 1),
('ASSISTENTE', 'Assistente social', 2),
('TECNICO', 'Técnico especializado', 2),
('COORDENADOR', 'Coordenador de equipamento', 3),
('DIRETOR', 'Diretor de departamento', 4),
('ADMINISTRADOR', 'Administrador do sistema', 4);

-- Inserir equipamentos
INSERT INTO equipamento (nome, regiao, endereco, telefone, email) VALUES 
('CRAS Oeste', 'Oeste', 'Rua das Palmeiras, 123 - Bairro Oeste', '(17) 3345-1100', 'cras.oeste@bebedouro.sp.gov.br'),
('CRAS Leste', 'Leste', 'Avenida Brasil, 456 - Bairro Leste', '(17) 3345-2200', 'cras.leste@bebedouro.sp.gov.br'),
('CRAS Norte', 'Norte', 'Rua Amazonas, 789 - Bairro Norte', '(17) 3345-3300', 'cras.norte@bebedouro.sp.gov.br'),
('CRAS Sul', 'Sul', 'Rua Rio de Janeiro, 101 - Bairro Sul', '(17) 3345-4400', 'cras.sul@bebedouro.sp.gov.br'),
('CREAS Central', 'Centro', 'Praça da Matriz, 200 - Centro', '(17) 3345-5500', 'creas@bebedouro.sp.gov.br'),
('Centro POP', 'Centro', 'Rua XV de Novembro, 321 - Centro', '(17) 3345-6600', 'centropop@bebedouro.sp.gov.br'),
('Secretaria de Assistência Social', 'Centro', 'Rua São João, 400 - Centro', '(17) 3345-7700', 'assistencia@bebedouro.sp.gov.br');

-- Inserir programas sociais disponíveis
INSERT INTO programas_sociais_disponiveis (codigo, nome, descricao, valor_padrao) VALUES
('BPC', 'Benefício de Prestação Continuada', 'Benefício mensal para idosos e pessoas com deficiência', 1412.00),
('BF', 'Bolsa Família', 'Programa de transferência de renda', 600.00),
('AB', 'Auxílio Brasil', 'Programa de transferência de renda', 600.00),
('RM', 'Renda Mínima', 'Programa municipal de renda mínima', 300.00),
('RC', 'Renda Cidadã', 'Programa estadual de renda', 250.00),
('AJ', 'Auxílio Jovem', 'Programa para jovens', 200.00),
('OUTRO', 'Outros Programas', 'Outros programas não listados', NULL);

-- Inserir tipos de despesas
INSERT INTO tipos_despesas (codigo, nome, descricao, obrigatoria) VALUES
('ALIMENTACAO', 'Alimentação', 'Gastos com alimentação da família', TRUE),
('MORADIA', 'Moradia', 'Aluguel, financiamento ou taxas de moradia', TRUE),
('ENERGIA', 'Energia Elétrica', 'Conta de energia elétrica', TRUE),
('AGUA', 'Água', 'Conta de água e esgoto', TRUE),
('GAS', 'Gás', 'Gás de cozinha', TRUE),
('TELEFONE', 'Telefone', 'Telefone fixo e celular', FALSE),
('INTERNET', 'Internet', 'Acesso à internet', FALSE),
('TRANSPORTE', 'Transporte', 'Passagens e combustível', TRUE),
('MEDICACAO', 'Medicação', 'Medicamentos e tratamentos', FALSE),
('OUTROS', 'Outros', 'Outras despesas não categorizadas', FALSE);

-- Inserir usuário administrador
INSERT INTO usuarios (nome, cpf, email, senha_hash, cargo_id, equipamento_id) VALUES  
('Administrador do Sistema', '000.000.000-00', 'admin@sistema.gov.br', '$2b$10$0r8J5hKpMlCWFkrH1pEgz.xQW7xh6iQis6N.VznF0.fyZ5OrxYPB2', 6, 1);

-- ============================================
-- VIEWS E PROCEDURES ÚTEIS
-- ============================================

-- View para busca de famílias com informações básicas
CREATE VIEW view_familias_resumo AS
SELECT 
    f.id,
    f.prontuario,
    f.data_cadastro,
    f.data_atendimento,
    f.situacao,
    e.nome as equipamento_nome,
    e.regiao,
    u.nome as profissional_nome,
    p.nome_completo as responsavel_nome,
    p.cpf as responsavel_cpf,
    p.telefone as responsavel_telefone,
    end.bairro,
    end.cidade,
    tr.rendimento_total
FROM familias f
INNER JOIN equipamento e ON f.equipamento_id = e.id
INNER JOIN usuarios u ON f.profissional_id = u.id
LEFT JOIN pessoas p ON f.id = p.familia_id AND p.tipo_membro = 'responsavel'
LEFT JOIN enderecos end ON f.id = end.familia_id
LEFT JOIN trabalho_renda tr ON f.id = tr.familia_id
ORDER BY f.data_cadastro DESC;

-- View para relatórios de atendimentos
CREATE VIEW view_atendimentos_mes AS
SELECT 
    DATE_FORMAT(f.data_cadastro, '%Y-%m') as mes_ano,
    e.nome as equipamento,
    COUNT(*) as total_atendimentos,
    COUNT(CASE WHEN f.situacao = 'ativo' THEN 1 END) as ativos,
    AVG(tr.rendimento_total) as renda_media
FROM familias f
INNER JOIN equipamento e ON f.equipamento_id = e.id
LEFT JOIN trabalho_renda tr ON f.id = tr.familia_id
WHERE f.data_cadastro >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)
GROUP BY DATE_FORMAT(f.data_cadastro, '%Y-%m'), e.id, e.nome
ORDER BY mes_ano DESC, e.nome;

-- ============================================
-- ÍNDICES ADICIONAIS PARA PERFORMANCE
-- ============================================

-- Índices compostos para consultas frequentes
CREATE INDEX idx_familias_equipamento_data ON familias(equipamento_id, data_cadastro);
CREATE INDEX idx_familias_profissional_situacao ON familias(profissional_id, situacao);
CREATE INDEX idx_pessoas_familia_tipo ON pessoas(familia_id, tipo_membro);
CREATE INDEX idx_evolucoes_familia_data ON evolucoes(familia_id, data_evolucao);

-- ============================================
-- TRIGGERS PARA AUDITORIA E VALIDAÇÃO
-- ============================================

-- Trigger para gerar prontuário automaticamente
DELIMITER //
CREATE TRIGGER trg_familia_prontuario 
BEFORE INSERT ON familias
FOR EACH ROW
BEGIN
    IF NEW.prontuario IS NULL OR NEW.prontuario = '' THEN
        SET NEW.prontuario = CONCAT(
            YEAR(NEW.data_cadastro), 
            LPAD(NEW.equipamento_id, 2, '0'), 
            LPAD((SELECT COALESCE(MAX(SUBSTRING(prontuario, -6)), 0) + 1 
                  FROM familias 
                  WHERE equipamento_id = NEW.equipamento_id 
                  AND YEAR(data_cadastro) = YEAR(NEW.data_cadastro)), 6, '0')
        );
    END IF;
END//
DELIMITER ;

-- Trigger para validar responsável familiar
DELIMITER //
CREATE TRIGGER trg_validar_responsavel
AFTER INSERT ON pessoas
FOR EACH ROW
BEGIN
    DECLARE responsavel_count INT;
    
    IF NEW.tipo_membro = 'responsavel' THEN
        SELECT COUNT(*) INTO responsavel_count
        FROM pessoas 
        WHERE familia_id = NEW.familia_id 
        AND tipo_membro = 'responsavel' 
        AND id != NEW.id;
        
        IF responsavel_count > 0 THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Uma família pode ter apenas um responsável';
        END IF;
    END IF;
END//
DELIMITER ;


insert into usuarios (nome,cpf,senha_hash,cargo_id,equipamento_id) values  ("Admin","123","$2b$10$0r8J5hKpMlCWFkrH1pEgz.xQW7xh6iQis6N.VznF0.fyZ5OrxYPB2",1,1);


depois do cadastro de familia, voltar pra tela de home, de lá fazer a evolução